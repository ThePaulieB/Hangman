{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPNkQ5YS1rgyVGQR0gaNDTD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ThePaulieB/Hangman/blob/main/Hangman.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qsMmQg1SOCxa",
        "outputId": "2db3e21a-4337-4ac9-ebc8-5df39da75e59"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: random-word in /usr/local/lib/python3.10/dist-packages (1.0.11)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from random-word) (2.27.1)\n",
            "Requirement already satisfied: pytest in /usr/local/lib/python3.10/dist-packages (from random-word) (7.2.2)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from random-word) (6.0)\n",
            "Requirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (23.1.0)\n",
            "Requirement already satisfied: iniconfig in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (2.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (23.1)\n",
            "Requirement already satisfied: pluggy<2.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (1.0.0)\n",
            "Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (1.1.1)\n",
            "Requirement already satisfied: tomli>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (2.0.1)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->random-word) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->random-word) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->random-word) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->random-word) (3.4)\n",
            "\n",
            "H A N G M A N\n",
            "Type \"play\" to play the game, \"results\" to show the scoreboard, and \"exit\" to quit:\n",
            "snooperscope\n",
            "play\n",
            "\n",
            "------------\n",
            "8 tries left! Input a letter:\n",
            "s\n",
            "\n",
            "s------s----\n",
            "8 tries left! Input a letter:\n",
            "n\n",
            "\n",
            "sn-----s----\n",
            "8 tries left! Input a letter:\n",
            "o\n",
            "\n",
            "snoo---s-o--\n",
            "8 tries left! Input a letter:\n",
            "p\n",
            "\n",
            "snoop--s-op-\n",
            "8 tries left! Input a letter:\n",
            "e\n",
            "\n",
            "snoope-s-ope\n",
            "8 tries left! Input a letter:\n",
            "r\n",
            "\n",
            "snoopers-ope\n",
            "8 tries left! Input a letter:\n",
            "c\n",
            "\n",
            "You guessed the word snooperscope!\n",
            "You survived!\n",
            "Type \"play\" to play the game, \"results\" to show the scoreboard, and \"exit\" to quit:\n",
            "falconine\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-4e29fbb1f160>\u001b[0m in \u001b[0;36m<cell line: 104>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    102\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m \u001b[0mintro\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 104\u001b[0;31m \u001b[0mshow_menu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-9-4e29fbb1f160>\u001b[0m in \u001b[0;36mshow_menu\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Type \"play\" to play the game, \"results\" to show the scoreboard, and \"exit\" to quit:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msecret_word\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m         \u001b[0maction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maction\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"play\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m             \u001b[0mplay_game\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ],
      "source": [
        "!pip install random-word\n",
        "import random\n",
        "from random_word import RandomWords\n",
        "\n",
        "score = {\"win\": 0, \"lost\": 0}\n",
        "\n",
        "def getword():\n",
        "  global secret_word\n",
        "  r = RandomWords()\n",
        "  secret_word = r.get_random_word()\n",
        "\n",
        "def intro():\n",
        "    print(\"\\nH A N G M A N\")\n",
        "\n",
        "\n",
        "def show_menu():\n",
        "    while True:\n",
        "        print('Type \"play\" to play the game, \"results\" to show the scoreboard, and \"exit\" to quit:')\n",
        "        action = input()\n",
        "        if action == \"play\":\n",
        "            play_game()\n",
        "        elif action == \"results\":\n",
        "            show_results()\n",
        "        elif action == \"exit\":\n",
        "            break\n",
        "        else:\n",
        "            continue\n",
        "\n",
        "\n",
        "def get_word_to_guess():\n",
        "    return list(random.choice(words))\n",
        "\n",
        "\n",
        "def validate_input(user_input, input_letters):\n",
        "    if len(user_input) != 1:\n",
        "        print(\"Please, input a single letter.\")\n",
        "        return False\n",
        "    elif not user_input.isalpha() or user_input.isupper():\n",
        "        print(\"Please, enter a lowercase letter from the English alphabet.\")\n",
        "        return False\n",
        "    elif user_input in input_letters:\n",
        "        print(\"You've already guessed this letter.\")\n",
        "        return False\n",
        "    else:\n",
        "        input_letters.append(user_input)\n",
        "        return True\n",
        "\n",
        "\n",
        "def show_guessed_letters(letter, word_to_guess, guessed):\n",
        "    for i in range(len(word_to_guess)):\n",
        "        if word_to_guess[i] == letter:\n",
        "            guessed[i] = letter\n",
        "\n",
        "    return guessed\n",
        "\n",
        "\n",
        "def evaluate_result(guessed):\n",
        "    global secret_word\n",
        "    if \"-\" in guessed:\n",
        "        score[\"lost\"] += 1\n",
        "        print()\n",
        "        print(f\"You lost! The word was {secret_word}\")\n",
        "        getword()\n",
        "    else:\n",
        "        score[\"win\"] += 1\n",
        "        result = \"\".join(guessed)\n",
        "        print()\n",
        "        print(f\"You guessed the word {result}!\")\n",
        "        print(\"You survived!\")\n",
        "        getword()\n",
        "\n",
        "\n",
        "def play_game():\n",
        "    global secret_word\n",
        "    input_letters = []\n",
        "    word_to_guess = secret_word\n",
        "    guessed = [\"-\"] * len(word_to_guess)\n",
        "    allowed_mistakes = 8\n",
        "    while allowed_mistakes > 0:\n",
        "        print()\n",
        "        print(\"\".join(guessed))\n",
        "        print(f\"{allowed_mistakes} tries left! Input a letter:\")\n",
        "        letter = input()\n",
        "        if not validate_input(letter, input_letters):\n",
        "            continue\n",
        "        elif letter in word_to_guess:\n",
        "            guessed = show_guessed_letters(letter, word_to_guess, guessed)\n",
        "            if \"-\" not in guessed:\n",
        "                break\n",
        "        else:\n",
        "            allowed_mistakes -= 1\n",
        "            print(f\"That letter doesn't appear in the word.\")\n",
        "\n",
        "    evaluate_result(guessed)\n",
        "\n",
        "\n",
        "def show_results():\n",
        "    print(f'\\nYou won: {score[\"win\"]} times')\n",
        "    print(f'You lost: {score[\"lost\"]} times\\n')\n",
        "\n",
        "\n",
        "intro()\n",
        "show_menu()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install random-word\n",
        "import random\n",
        "from random_word import RandomWords\n",
        "\n",
        "score = {\"win\": 0, \"lost\": 0}\n",
        "\n",
        "def getword():\n",
        "  global secret_word\n",
        "  r = RandomWords()\n",
        "  secret_word = r.get_random_word()\n",
        "\n",
        "getword()\n",
        "print(secret_word)\n",
        "getword()\n",
        "print(secret_word)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f5he8q-yUMI2",
        "outputId": "3233d2e4-cf50-4c2e-f7fa-26775ccf1cd5"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: random-word in /usr/local/lib/python3.10/dist-packages (1.0.11)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from random-word) (2.27.1)\n",
            "Requirement already satisfied: pytest in /usr/local/lib/python3.10/dist-packages (from random-word) (7.2.2)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from random-word) (6.0)\n",
            "Requirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (23.1.0)\n",
            "Requirement already satisfied: iniconfig in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (2.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (23.1)\n",
            "Requirement already satisfied: pluggy<2.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (1.0.0)\n",
            "Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (1.1.1)\n",
            "Requirement already satisfied: tomli>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pytest->random-word) (2.0.1)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->random-word) (1.26.15)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->random-word) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->random-word) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->random-word) (3.4)\n",
            "hogfish\n",
            "nodal\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7QqpucCrOrMG"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}